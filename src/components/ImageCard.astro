---
interface Props {
  src: string;
  alt: string;
  publicId: string;
}

const { src, alt, publicId } = Astro.props;
---

<div
  class='group relative overflow-hidden rounded-2xl bg-white shadow-lg hover:shadow-2xl transition-all duration-700 border border-gray-100 transform-gpu'
>
  <div class='overflow-hidden relative'>
    <!-- Indicador de carga -->
    <div
      class='absolute inset-0 bg-gradient-to-br from-gray-100 via-gray-50 to-gray-100 animate-pulse flex items-center justify-center'
    >
      <div class='w-12 h-12 border-4 border-gray-300 border-t-blue-500 rounded-full animate-spin'>
      </div>
    </div>

    <img
      src={src}
      alt={alt}
      loading='lazy'
      class='w-full h-auto object-cover group-hover:scale-105 transition-transform duration-1000 ease-out relative z-10'
      onload="this.previousElementSibling.style.display='none';"
      onerror="this.style.display='none'; this.parentNode.querySelector('.error-state').style.display='flex';"
    />

    <!-- Estado de error mejorado -->
    <div
      class='error-state w-full h-64 bg-gradient-to-br from-red-50 to-red-100 hidden items-center justify-center flex-col text-red-600 relative z-10'
    >
      <div class='text-6xl mb-4 opacity-60'>🚫</div>
      <div class='text-lg font-semibold mb-2'>Error de carga</div>
      <div class='text-sm text-red-500 text-center px-4 mb-4'>No se pudo cargar la imagen</div>
      <div
        class='text-xs px-3 py-2 bg-white rounded-lg text-red-700 border border-red-200 break-all text-center max-w-full'
      >
        {publicId}
      </div>
    </div>
  </div>

  <!-- Overlay con glassmorphism -->
  <div
    class='absolute inset-0 bg-gradient-to-t from-black/90 via-black/30 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-700 flex flex-col justify-end backdrop-blur-sm'
  >
    <div
      class='p-6 text-white transform translate-y-6 group-hover:translate-y-0 transition-transform duration-700 ease-out'
    >
      <!-- Título con efecto brillante -->
      <div class='relative mb-4'>
        <p class='text-base font-bold truncate text-white/95 relative z-10'>
          {publicId}
        </p>
        <div
          class='absolute inset-0 bg-gradient-to-r from-blue-400/20 to-purple-400/20 blur-sm opacity-0 group-hover:opacity-100 transition-opacity duration-500'
        >
        </div>
      </div>

      <!-- Botones con efectos mejorados -->
      <div class='flex flex-wrap gap-3'>
        <button
          class='group/btn px-4 py-2.5 bg-white/15 backdrop-blur-md hover:bg-white/25 rounded-xl text-sm font-medium transition-all duration-400 border border-white/20 hover:border-white/40 flex items-center gap-2 hover:scale-105'
          onclick={`window.open('${src}', '_blank')`}
        >
          <span class='text-lg'>🔍</span>
          <span class='group-hover/btn:translate-x-0.5 transition-transform duration-300'
            >Ver Original</span
          >
        </button>

        <button
          class='group/btn px-4 py-2.5 bg-white/15 backdrop-blur-md hover:bg-white/25 rounded-xl text-sm font-medium transition-all duration-400 border border-white/20 hover:border-white/40 flex items-center gap-2 hover:scale-105'
          onclick={`
            navigator.clipboard.writeText('${src}').then(() => {
              const btn = this;
              const originalContent = btn.innerHTML;
              btn.innerHTML = '<span class="text-lg">✅</span><span>¡Copiado!</span>';
              btn.style.background = 'rgba(34, 197, 94, 0.4)';
              btn.style.borderColor = 'rgba(34, 197, 94, 0.6)';
              btn.style.transform = 'scale(1.1)';
              
              setTimeout(() => {
                btn.innerHTML = originalContent;
                btn.style.background = 'rgba(255, 255, 255, 0.15)';
                btn.style.borderColor = 'rgba(255, 255, 255, 0.2)';
                btn.style.transform = 'scale(1)';
              }, 2500);
            }).catch(() => {
              const btn = this;
              btn.style.background = 'rgba(239, 68, 68, 0.4)';
              btn.style.borderColor = 'rgba(239, 68, 68, 0.6)';
              setTimeout(() => {
                btn.style.background = 'rgba(255, 255, 255, 0.15)';
                btn.style.borderColor = 'rgba(255, 255, 255, 0.2)';
              }, 2000);
            });
          `}
        >
          <span class='text-lg'>📋</span>
          <span class='group-hover/btn:translate-x-0.5 transition-transform duration-300'
            >Copiar URL</span
          >
        </button>
      </div>
    </div>
  </div>

  <!-- Indicador de estado superior derecho -->
  <div class='absolute top-3 right-3 opacity-0 group-hover:opacity-100 transition-all duration-500'>
    <div
      class='w-3 h-3 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full animate-pulse shadow-lg'
    >
    </div>
  </div>

  <!-- Brillo en hover -->
  <div
    class='absolute inset-0 bg-gradient-to-tr from-transparent via-white/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-700 pointer-events-none'
  >
  </div>
</div>
